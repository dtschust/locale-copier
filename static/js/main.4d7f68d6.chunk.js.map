{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["defaultLocales","MyDropzone","props","locales","onDrop","useCallback","acceptedFiles","length","downloadFileName","zip","JSZip","forEach","file","i","name","split","extension","pop","filename","join","locale","generateAsync","type","then","blob","saveAs","buildAndDownloadZip","useDropzone","getRootProps","getInputProps","isDragActive","className","App","useState","setLocales","rows","cols","value","onChange","e","newValue","target","map","trim","style","fontSize","listStyleType","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+QAOMA,EAAiB,CAAC,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,SAElH,SAASC,EAAWC,GAClB,IAAMC,EAAUD,GAASA,EAAMC,QACzBC,EAASC,uBAAY,SAAAC,GAErBA,GAAiBA,EAAcC,QAkBvC,SAA6BD,EAAeH,GAC1C,GAAIG,GAAiBA,EAAcC,OAAQ,CACzC,IAAIC,EAAmB,SACjBC,EAAM,IAAIC,IAChBJ,EAAcK,SAAQ,SAACC,EAAMC,GAC3B,IAAMC,EAAOF,GAAQA,EAAKE,MAAQF,EAAKE,KAAKC,MAAM,KAC5CC,EAAYF,EAAKG,MACjBC,EAAWJ,EAAKK,KAAK,KAEjB,IAANN,GAAoC,IAAzBP,EAAcC,SAC3BC,EAAmBU,GAGrBf,EAAQQ,SAAQ,SAACS,GACfX,EAAIG,KAAJ,UAAYJ,EAAZ,YAAgCU,EAAhC,YAA4CE,EAA5C,YAAsDJ,GAAaJ,SAKvEH,EAAIY,cAAc,CAACC,KAAK,SAASC,MAAK,SAAUC,GAC9CC,iBAAOD,EAAD,UAAUhB,EAAV,aArCNkB,CAAoBpB,EAAeH,KAEpC,CAACA,IAPqB,EAQ2BwB,YAAY,CAACvB,WAA1DwB,EARkB,EAQlBA,aAAcC,EARI,EAQJA,cAAeC,EARX,EAQWA,aAEpC,OACE,8CAAKC,UAAU,YAAeH,KAA9B,cACE,qCAAWC,MAETC,EACE,wDACA,4FAgEKE,MAhCf,WAAgB,IAAD,EACiBC,mBAASjC,GAD1B,mBACNG,EADM,KACG+B,EADH,KASb,OACE,qBAAKH,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,0CACA,8BACE,4GAEF,0BAAUI,KAAM,EAAGC,KAAM,GAAIC,MAAOlC,EAAQgB,KAAK,MAAOmB,SAZ9D,SAAuBC,GACrB,IAAMC,EAAWD,GAAKA,EAAEE,QAAUF,EAAEE,OAAOJ,MAC3CH,EAAWM,EAASzB,MAAM,KAAK2B,KAAI,SAACtB,GAAD,OAAYA,EAAOuB,cAWlD,uDAEA,oBAAIC,MAAO,CAACC,SAAU,OAAQC,cAAe,QAA7C,SACG3C,EAAQuC,KAAI,SAACtB,GAAD,OACX,6BAAkBA,GAATA,WAIb,kDACA,cAACnB,EAAD,CAAYE,QAASA,UCvEd4C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4d7f68d6.chunk.js","sourcesContent":["import React, {useCallback, useState} from 'react'\nimport {useDropzone} from 'react-dropzone'\nimport JSZip from 'jszip';\nimport { saveAs } from 'file-saver';\n\nimport './App.css';\n\nconst defaultLocales = ['en-GB', 'de-DE', 'es-ES', 'es-LA', 'fr-FR', 'ja-JP', 'pt-BR', 'ko-KR', 'it-IT', 'zh-CN', 'zh-TW']\n\nfunction MyDropzone(props) {\n  const locales = props && props.locales;\n  const onDrop = useCallback(acceptedFiles => {\n    // Do something with the files\n    if (acceptedFiles && acceptedFiles.length) {\n      buildAndDownloadZip(acceptedFiles, locales);\n    }\n  }, [locales])\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n  return (\n    <div className='dropzone' {...getRootProps()}>\n      <input {...getInputProps()} />\n      {\n        isDragActive ?\n          <p>Drop the files here ...</p> :\n          <p>Drag 'n' drop some files here, or click to select files</p>\n      }\n    </div>\n  )\n}\n\nfunction buildAndDownloadZip(acceptedFiles, locales) {\n  if (acceptedFiles && acceptedFiles.length) {\n    let downloadFileName = 'output';\n    const zip = new JSZip();\n    acceptedFiles.forEach((file, i) => {\n      const name = file && file.name && file.name.split('.');\n      const extension = name.pop();\n      const filename = name.join('.');\n\n      if (i === 0 && acceptedFiles.length === 1) {\n        downloadFileName = filename;\n      }\n\n      locales.forEach((locale) => {\n        zip.file(`${downloadFileName}/${filename}.${locale}.${extension}`, file)\n      });\n\n    })\n\n    zip.generateAsync({type:\"blob\"}).then(function (blob) {\n      saveAs(blob, `${downloadFileName}.zip`);\n    });\n  }\n\n}\n\nfunction App() {\n  const [locales, setLocales] = useState(defaultLocales);\n\n\n  function onChangeInput(e) {\n    const newValue = e && e.target && e.target.value;\n    setLocales(newValue.split(',').map((locale) => locale.trim()));\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Locales:</h1>\n        <div>\n          <p>ðŸ‘‡To remove or change locales, edit the text below ðŸ‘‡</p>\n        </div>\n        <textarea rows={5} cols={50} value={locales.join(', ')} onChange={onChangeInput}/>\n        <div>\n        Locales to generate:\n        <ul style={{fontSize: '18px', listStyleType: 'none'}}>\n          {locales.map((locale)=> (\n            <li key={locale}>{locale}</li>\n          ))}\n        </ul>\n        </div>\n        <h1>Upload Image(s):</h1>\n        <MyDropzone locales={locales}/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}